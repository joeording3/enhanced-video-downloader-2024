#!/usr/bin/env node
/*
  Export cookies for a given domain from a local Chromium-based browser profile.
  Output can be JSON (for Playwright context.addCookies) or Netscape cookie jar.
  Requires: chrome-cookies-secure

  Usage:
    node scripts/export-chrome-cookies.js <domain> <out-path> [browser] [profile] [--format=json|netscape]

  Examples:
    node scripts/export-chrome-cookies.js hypnotube.com ./hypnotube-cookies.json
    node scripts/export-chrome-cookies.js example.com ./cookies.txt chrome "Profile 1" --format=netscape
    node scripts/export-chrome-cookies.js site.com ./cookies.json brave Default --format=json

  Supported browsers (case-insensitive): Chrome, Chromium, Canary, Edge, Opera, Brave
*/

const fs = require("fs");
const path = require("path");
const { getCookiesPromised } = require("chrome-cookies-secure");

function parseArgs(argv) {
  const [domain, outPath, browserArg, profileArg, maybeFormat] = argv.slice(2);
  if (!domain || !outPath) {
    console.error(
      "Usage: node scripts/export-chrome-cookies.js <domain> <out-path> [browser] [profile] [--format=json|netscape]"
    );
    process.exit(1);
  }
  const browser = browserArg || "Chrome";
  const profile = profileArg || undefined; // e.g., 'Default', 'Profile 1'
  let format = "json";
  for (const a of argv.slice(2)) {
    if (typeof a === "string" && a.startsWith("--format=")) {
      format = a.split("=")[1] || "json";
    }
  }
  return { domain, outPath, browser, profile, format };
}

function toJsonCookies(domain, cookieHeader) {
  const pairs = cookieHeader
    .split(";")
    .map(s => s.trim())
    .filter(Boolean);
  const jsonCookies = pairs
    .map(p => {
      const idx = p.indexOf("=");
      if (idx <= 0) return null;
      const name = p.slice(0, idx).trim();
      const value = p.slice(idx + 1).trim();
      if (!name) return null;
      return {
        name,
        value,
        domain: domain.startsWith(".") ? domain : `.${domain}`,
        path: "/",
        httpOnly: false,
        secure: true,
        sameSite: "Lax",
      };
    })
    .filter(Boolean);
  return jsonCookies;
}

function toNetscapeJar(domain, cookieHeader) {
  // Netscape format: domain\tinclude_subdomains\tpath\tsecure\texpiration\tname\tvalue
  const lines = [
    "# Netscape HTTP Cookie File",
    "# This file was generated by export-chrome-cookies.js",
    "",
  ];
  const pairs = cookieHeader
    .split(";")
    .map(s => s.trim())
    .filter(Boolean);
  const baseDomain = domain.startsWith(".") ? domain : `.${domain}`;
  for (const p of pairs) {
    const idx = p.indexOf("=");
    if (idx <= 0) continue;
    const name = p.slice(0, idx).trim();
    const value = p.slice(idx + 1).trim();
    const includeSub = "TRUE";
    const pathVal = "/";
    const secure = "TRUE";
    const expiry = (Math.floor(Date.now() / 1000) + 3600 * 24 * 30).toString(); // +30d
    lines.push([baseDomain, includeSub, pathVal, secure, expiry, name, value].join("\t"));
  }
  return lines.join("\n") + "\n";
}

async function main() {
  const { domain, outPath, browser, profile, format } = parseArgs(process.argv);
  const normalizedDomain = domain.replace(/^\.*?/, "");
  const url = `https://${normalizedDomain}`;
  try {
    const cookieHeader = await getCookiesPromised(url, browser, profile);
    if (!cookieHeader || typeof cookieHeader !== "string") {
      throw new Error("No cookies were returned for the specified domain/profile");
    }
    const resolvedOut = path.resolve(outPath);
    if (format.toLowerCase() === "netscape") {
      const jar = toNetscapeJar(normalizedDomain, cookieHeader);
      fs.writeFileSync(resolvedOut, jar, "utf8");
      console.log(`Wrote Netscape cookie jar to ${resolvedOut}`);
    } else {
      const jsonCookies = toJsonCookies(normalizedDomain, cookieHeader);
      fs.writeFileSync(resolvedOut, JSON.stringify(jsonCookies, null, 2), "utf8");
      console.log(`Wrote ${jsonCookies.length} cookies (JSON) to ${resolvedOut}`);
    }
  } catch (err) {
    console.error(`Failed to export cookies: ${err && err.message ? err.message : err}`);
    process.exit(2);
  }
}

main();
