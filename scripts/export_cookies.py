#!/usr/bin/env python3
"""
Export cookies for a given domain from installed browsers using browser_cookie3.

Usage:
  python scripts/export_cookies.py <domain> <out_path> [--format=json|netscape]

Examples:
  python scripts/export_cookies.py hypnotube.com ./hypnotube-cookies.json
  python scripts/export_cookies.py example.com ./cookies.txt --format=netscape

Notes:
  - Attempts all supported Chromium/Firefox variants installed; merges cookies.
  - Requires: pip install browser-cookie3
"""

import json
import logging
import sys
import time
from contextlib import suppress
from http.cookiejar import Cookie
from pathlib import Path

try:
    import browser_cookie3 as bc3
except Exception:
    logger = logging.getLogger(__name__)
    logger.exception("browser_cookie3 not installed. Install with: pip install --user browser-cookie3")
    sys.exit(2)


def to_json_cookie(c: Cookie, domain_fallback: str):
    """Convert a Cookie to a JSON-serializable dict.

    Falls back to the provided domain when the cookie domain is empty.
    """
    domain = c.domain or ("." + domain_fallback.lstrip("."))
    return {
        "name": c.name,
        "value": c.value,
        "domain": domain,
        "path": c.path or "/",
        "httpOnly": bool(getattr(c, "rest", {}).get("HttpOnly", False)),
        "secure": bool(c.secure),
        "sameSite": getattr(c, "rest", {}).get("SameSite", "Lax"),
    }


def to_netscape_lines(c: Cookie, domain_fallback: str):
    """Render a Cookie into a single Netscape cookie-jar line."""
    domain = c.domain or ("." + domain_fallback.lstrip("."))
    include_sub = "TRUE"
    path = c.path or "/"
    secure = "TRUE" if c.secure else "FALSE"
    expiry = str(int(time.time()) + 3600 * 24 * 30)
    return f"{domain}\t{include_sub}\t{path}\t{secure}\t{expiry}\t{c.name}\t{c.value}"


USAGE = "Usage: python scripts/export_cookies.py <domain> <out_path> [--format=json|netscape]"


def main():
    """CLI entrypoint to export cookies to JSON or Netscape format."""
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    logger = logging.getLogger(__name__)
    if len(sys.argv) < 3:
        raise SystemExit(USAGE)
    domain = sys.argv[1].lower()
    out_path = Path(sys.argv[2]).expanduser().resolve()
    fmt = "json"
    for arg in sys.argv[3:]:
        if arg.startswith("--format="):
            fmt = arg.split("=", 1)[1].lower().strip()

    jars = []
    # Try multiple backends; ignore failures
    for getter in (bc3.chrome, bc3.chromium, bc3.brave, bc3.edge, bc3.opera, bc3.firefox):
        with suppress(Exception):
            jars.append(getter(domain_name=domain))

    merged = []
    names_seen = set()
    for jar in jars:
        for c in jar:
            key = (c.domain, c.path, c.name)
            if key in names_seen:
                continue
            names_seen.add(key)
            merged.append(c)

    if not merged:
        logger.error("No cookies found for domain across supported browsers/profiles")
        sys.exit(3)

    out_path.parent.mkdir(parents=True, exist_ok=True)
    if fmt == "netscape":
        lines = ["# Netscape HTTP Cookie File", "# Generated by export_cookies.py", ""]
        lines.extend(to_netscape_lines(c, domain) for c in merged)
        out_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
        logger.info("Wrote Netscape cookie jar to %s", out_path)
    else:
        js = [to_json_cookie(c, domain) for c in merged]
        out_path.write_text(json.dumps(js, indent=2), encoding="utf-8")
        logger.info("Wrote %d cookies (JSON) to %s", len(js), out_path)


if __name__ == "__main__":
    main()
