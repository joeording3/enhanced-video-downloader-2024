[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "videodownloader-server"
version = "1.0.0"
description = "Enhanced Video Downloader server - Chrome extension companion"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "ISC"}
authors = [
    {name = "Joseph Ording", email = "joe@example.com"}
]
dependencies = [
    "annotated-types==0.7.0",
    "blinker==1.9.0",
    "browser_cookie3>=0.14.0",
    "certifi==2025.4.26",
    "charset-normalizer==3.4.2",
    "click==8.2.0",
    "Flask==3.1.1",
    "flask-cors==5.0.1",
    "gallery_dl==1.29.6",
    "gunicorn==23.0.0",
    "idna==3.10",
    "itsdangerous==2.2.0",
    "Jinja2==3.1.6",
    "MarkupSafe==3.0.2",
    "packaging==25.0",
    "psutil>=5.8.0",
    "pydantic==2.11.4",
    "pydantic_core==2.33.2",
    "PyYAML==6.0.1",
    "python-dotenv==1.0.0",
    "requests==2.32.3",
    "Send2Trash==1.8.3",
    "setuptools==80.7.1",
    "tqdm>=4.64.0",
    "typing-inspection==0.4.0",
    "typing_extensions==4.13.2",
    "urllib3==2.4.0",
    "Werkzeug==3.1.3",
    "wheel==0.45.1",
    "yt-dlp==2025.4.30",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pylint>=2.15.0",
    "black>=22.6.0",
    "flake8>=5.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-bugbear>=22.1.11",
    "flake8-pytest-style>=1.7.0",
    "python-dotenv>=1.0.0",
    "ruff>=0.0.0",
    "mypy>=1.0.0",
    "pyright>=1.1.0",
    "types-PyYAML",
    "types-requests",
    "mutmut>=2.4.0",
    "hypothesis>=6.0.0",
]

[project.scripts]
videodownloader-server = "server.cli_main:main"

[tool.setuptools.package-data]
server = ["*.json"]

[tool.setuptools]
packages = [
    "server",
    "server.api",
    "server.downloads",
    "server.cli",
    "server.cli_commands",
]

# uv-specific configuration
[tool.uv]
# Use uv for dependency resolution and installation
# This enables faster dependency resolution and installation

[tool.black]
line-length = 120
target-version = ["py38"]
# skip these directories/files entirely
exclude = '''
/(
  .*$py.class | .*.css.map | .*.d.ts | .*.egg-info | .*.env | .*.envrc | .*.js.map | .*.min.css | .*.py[cod] | .coverage | .coverage.* | .eggs | .env | .envrc | .git | .github | .github/actions | .github/workflows | .husky | .hypothesis | .mypy_cache | .pytest_cache | .ruff_cache | .stryker-tmp | .venv | __pycache__ | build | ci | coverage | coverage_html | dist | docs/.doctrees | docs/_build | etc | htmlcov | logs | mutants | node_modules | package-lock.json | pnpm-lock.yaml | reports | server.lock | uv.lock | venv | yarn.lock
)/
'''

[tool.isort]
profile = "black"
line_length = 120
skip = [".git", ".venv", "venv", "node_modules", "build", "dist", "__pycache__", ".mypy_cache", ".pytest_cache", ".ruff_cache", "etc", ".github", ".husky", "logs", "coverage", "*.egg-info", "server.lock", "mutants"]

[tool.flake8]
# Match Black's line-length so Black + Flake8 agree
max-line-length = 120
# Unified exclude list for all Python tools
exclude = [".git", ".venv", "venv", "node_modules", "build", "dist", "__pycache__", ".mypy_cache", ".pytest_cache", ".ruff_cache", "etc", ".github", ".husky", "logs", "coverage", "*.py[cod]", "*.egg-info", "server.lock", "mutants"]
# File-specific ignores to suppress test docstring and pytest style errors
per-file-ignores = [
    "server/cli.py: E402, E501",
    "server/cli_helpers.py: E501, D103",
    "server/config.py: E501, D200, D107, D205, D400",
    "server/__main__.py: E501, D205",
    "server/api/restart_bp.py: E501",
    "server/logging_setup.py: E501, D200, D205",
    "server/downloads/gallery_dl.py: E501",
    "server/downloads/ytdlp.py: E501, D200, D103, D401",
    "server/schemas.py: E501, D101, D102, D200",
    "server/disable_launchagents.py: D205, D213",
    "tests/**/*.py: D100, D101, D102, D103, D105, D107, D202, PT004, PT006, PT013, PT018, PT022",
]

[tool.ruff]
line-length = 120
extend-include = ["*.py"]
exclude = [
    ".git/", ".venv/", "venv/", "node_modules/", "build/", "dist/", "__pycache__", ".mypy_cache/", ".pytest_cache/", ".ruff_cache/", "etc/", ".github/", ".husky/", "logs/", "coverage/", "*.py[cod]", "*.egg-info/", "server.lock", "mutants/"
]
# Emoji detection is enforced via scripts/check_emojis.py and scripts/check_markdown_emojis.py, not Ruff.

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "TID", # flake8-tidy-imports
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging-format
    "RUF", # Ruff-specific rules
]

# Ignore specific rules that are too strict for this project
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Function is too complex
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "S101",   # Use of assert detected (common in tests)
    "S108",   # Probable insecure usage of temporary file
    "D100",   # Missing docstring in public module
    "D212",   # Multi-line docstring summary should start at the first line
    "D401",   # First line should be in imperative mood
    "PT013",  # Incorrect import of pytest
    "PT018",  # Assertion should be broken down into multiple parts
    "ANN401", # Dynamically typed expressions are disallowed
    "FA100",  # Add from __future__ import annotations
    "ARG005", # Unused lambda argument
    "PLC0415", # Import should be at the top-level of a file (temporarily disabled)
]

per-file-ignores = { "tests/test_emoji_detection.py" = ["E501"], "tests/**/*.py" = ["D100", "D212", "S101", "PT013", "PT018", "ANN401", "ARG001", "ARG002", "PLR2004", "S108", "SLF001", "TRY002", "TRY003", "RET504", "PTH103", "PTH123", "PTH119", "PLR0124", "PIE790", "UP024"] }

[tool.mypy]
# Basic type checking settings
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  # require all functions to have type annotations
disallow_incomplete_defs = true  # partial type annotations
check_untyped_defs = true  # Check function bodies even if not fully annotated
disallow_untyped_decorators = true  # no untyped decorators
strict_optional = true  # Strict checking of Optional types
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Import handling
ignore_missing_imports = false
follow_imports = "silent"

# Error output
show_error_codes = false
show_column_numbers = true

# Files to exclude from checking
exclude = [
    "build/",
    "dist/",
    "mutants/",
    "htmlcov/",
    "coverage/",
    ".venv/",
    "venv/",
    "node_modules/",
]

[tool.pytest.ini_options]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "ui: marks tests as UI tests",
]

addopts = "-p no:pytest_postgresql"

[tool.coverage.run]
source = ["server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/build/*",
    "*/dist/*",
    "*/coverage/*",
    "*/htmlcov/*",
    "*/mutants/*",
]
parallel = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pyright]
# Basic type checking settings
pythonVersion = "3.8"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true

# Include/exclude patterns
include = ["server"]
exclude = [
    "build/",
    "dist/",
    "mutants/",
    "htmlcov/",
    "coverage/",
    ".venv/",
    "venv/",
    "node_modules/",
    "tests/",
]

# Error reporting
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedVariable = true
reportUnusedFunction = true
reportUnusedClass = true

# Strict settings
strictParameterNoneValue = true
strictDictionaryInference = true
strictListInference = true

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]
